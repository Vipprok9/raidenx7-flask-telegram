# server.py
import os, requests
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS

# ==== Flask & CORS (ph·ª•c v·ª• index.html ·ªü th∆∞ m·ª•c g·ªëc) ====
app = Flask(__name__, static_url_path="", static_folder=".")
CORS(app, resources={r"/api/*": {"origins": "*"}})

# ==== ENV tr√™n Render ====
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
CHAT_ID   = os.environ.get("CHAT_ID", "").strip()   # c√≥ th·ªÉ b·ªè tr·ªëng, s·∫Ω l·∫•y chat_id ƒë·ªông t·ª´ Telegram
TG_API    = "https://api.telegram.org/bot" + BOT_TOKEN

# ==== auto-reply ng·∫Øn (fallback) ====
AUTO_REPLY = {
    "hello": "Xin ch√†o üëã, m√¨nh l√† bot raidenx7!",
    "ai": "AI l√† tr√≠ tu·ªá nh√¢n t·∫°o gi√∫p t·ª± ƒë·ªông h√≥a v√† ph√¢n t√≠ch.",
    "token": "Token l√† ƒë∆°n v·ªã gi√° tr·ªã tr√™n blockchain.",
    "defi": "DeFi l√† t√†i ch√≠nh phi t·∫≠p trung (decentralized finance).",
    "airdrop": "Airdrop: d·ª± √°n t·∫∑ng token cho ng∆∞·ªùi d√πng.",
    "node": "Node l√† m√°y/ch∆∞∆°ng tr√¨nh tham gia m·∫°ng blockchain.",
    "depin": "DePIN l√† m·∫°ng l∆∞·ªõi h·∫° t·∫ßng v·∫≠t l√Ω phi t·∫≠p trung."
}

def match_auto(text: str) -> str:
    t = (text or "").lower().strip()
    for k, v in AUTO_REPLY.items():
        if k in t:
            return v
    return "M√¨nh ƒë√£ chuy·ªÉn c√¢u h·ªèi cho h·ªá th·ªëng, c·∫£m ∆°n b·∫°n!"

# ==== Trang test (/ m·ªü index.html) ====
@app.get("/")
def home():
    return send_file("index.html")

# ==== API: Web ‚Üí Telegram ====
# G·ª≠i JSON: {"text": "..."}  (tu·ª≥ ch·ªçn: {"chat_id": 123456789})
@app.post("/api/send")
def api_send():
    try:
        data = request.get_json(silent=True) or {}
        text = (data.get("text") or "").strip()
        chat_id = str(data.get("chat_id") or CHAT_ID).strip()

        if not text:
            return jsonify({"ok": False, "error": "missing text"}), 400
        if not BOT_TOKEN:
            return jsonify({"ok": False, "error": "missing BOT_TOKEN env"}), 500
        if not chat_id:
            return jsonify({"ok": False, "error": "missing chat_id (pass in body or set CHAT_ID env)"}), 400

        r = requests.post(
            f"{TG_API}/sendMessage",
            json={"chat_id": chat_id, "text": text},
            timeout=10
        )
        ok = r.ok and r.json().get("ok", False)
        return jsonify({"ok": bool(ok), "tg": r.json() if r.ok else r.text})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

# ==== API: Telegram ‚Üí Web (Webhook) ====
@app.post("/webhook")
def telegram_webhook():
    try:
        data = request.get_json(silent=True) or {}
        # Telegram c√≥ th·ªÉ g·ª≠i message, edited_message, channel_post...
        msg = data.get("message") or data.get("edited_message") or data.get("channel_post") or {}
        chat_id = (msg.get("chat") or {}).get("id")
        text = msg.get("text") or ""

        # Ghi log ƒë·ªÉ theo d√µi
        print("INCOMING:", {"chat_id": chat_id, "text": text}, flush=True)

        # Tr·∫£ l·ªùi ƒë∆°n gi·∫£n b·∫±ng auto-reply (c√≥ th·ªÉ thay b·∫±ng logic c·ªßa b·∫°n)
        reply = match_auto(text)

        if BOT_TOKEN and chat_id and reply:
            requests.post(
                f"{TG_API}/sendMessage",
                json={"chat_id": chat_id, "text": reply},
                timeout=10
            )

        return jsonify({"ok": True})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 200  # v·∫´n tr·∫£ 200 ƒë·ªÉ Telegram kh√¥ng retry qu√° nhi·ªÅu

# ==== Healthcheck ====
@app.get("/health")
def health():
    return {"ok": True}

# ==== cho Render (gunicorn s·∫Ω d√πng 'server:app') ====
app = app
