import os, requests
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS

# ==== Flask & CORS (ph·ª•c v·ª• index.html ·ªü root) ====
app = Flask(__name__, static_url_path="", static_folder=".", template_folder=".")
CORS(app, resources={r"/api/*": {"origins": "*"}})

# ==== ENV tr√™n Render ====
BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
CHAT_ID   = os.environ.get("CHAT_ID", "")
TG_API    = f"https://api.telegram.org/bot{BOT_TOKEN}"

# ==== fallback auto-reply ng·∫Øn (n·∫øu ch·ªß bot ch∆∞a rep) ====
AUTO_REPLY = {
    "hello": "Xin ch√†o üëã, m√¨nh l√† bot demo!",
    "ai": "AI l√† tr√≠ tu·ªá nh√¢n t·∫°o gi√∫p t·ª± ƒë·ªông ho√° x·ª≠ l√Ω th√¥ng tin.",
    "token": "Token l√† ƒë∆°n v·ªã gi√° tr·ªã c·ªßa d·ª± √°n (coin).",
    "defi": "DeFi l√† t√†i ch√≠nh phi t·∫≠p trung tr√™n blockchain.",
    "airdrop": "Airdrop: d·ª± √°n t·∫∑ng token cho ng∆∞·ªùi d√πng.",
    "node": "Node l√† m√°y/ch∆∞∆°ng tr√¨nh v·∫≠n h√†nh m·∫°ng.",
    "depin": "DePIN l√† m·∫°ng l∆∞·ªõi h·∫° t·∫ßng phi t·∫≠p trung (v√≠ d·ª•: Helium).",
}
def match_auto(text: str):
    t = (text or "").lower().strip()
    for k, v in AUTO_REPLY.items():
        if k in t:
            return v
    return "M√¨nh ƒë√£ chuy·ªÉn c√¢u h·ªèi cho ch·ªß bot, s·∫Ω tr·∫£ l·ªùi s·ªõm!"

# ==== Trang test (m·ªü t·∫°i /) ====
@app.get("/")
def home():
    return send_file("index.html")

# ==== API: Web ‚Üí Telegram ====
@app.post("/api/send")
def api_send():
    try:
        data = request.get_json(silent=True) or {}
        text = (data.get("text") or "").strip()
        if not text:
            return jsonify({"ok": False, "error": "EMPTY_TEXT"}), 400

        # G·ª≠i sang Telegram
        if BOT_TOKEN and CHAT_ID:
            requests.post(f"{TG_API}/sendMessage",
                          json={"chat_id": CHAT_ID, "text": f"[Web] {text}"},
                          timeout=10)

        # Tr·∫£ v·ªÅ c√¢u auto-reply t·∫°m th·ªùi ƒë·ªÉ web hi·ªÉn th·ªã
        reply = match_auto(text)
        return jsonify({"ok": True, "reply": reply})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

# ==== Healthcheck ====
@app.get("/health")
def health():
    return {"ok": True}

# ==== cho Render (gunicorn s·∫Ω d√πng 'server:app') ====
app = app
