import os, time, requests
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS

# ===== App & CORS =====
app = Flask(__name__, template_folder="templates")
CORS(app, resources={r"/api/*": {"origins": "*"}})

# ===== ENV tr√™n Render =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")              # token bot Telegram
CHAT_ID   = os.environ.get("CHAT_ID")                # chat id Telegram nh·∫≠n tin
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")    # (tu·ª≥ ch·ªçn) d√πng AI
TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# ===== T·ª™ ƒêI·ªÇN TR·∫¢ L·ªúI NG·∫ÆN (fallback) =====
AUTO_REPLY = {
    "hello": "Xin ch√†o üëã, m√¨nh l√† bot demo!",
    "ai": "AI (Tr√≠ tu·ªá nh√¢n t·∫°o) gi√∫p m√°y m√≥c h·ªçc t·ª´ d·ªØ li·ªáu ƒë·ªÉ t·ª± ƒë·ªông ho√° nhi·ªám v·ª•.",
    "token": "Token l√† ƒë∆°n v·ªã gi√° tr·ªã trong blockchain, d√πng l√†m th∆∞·ªüng, ph√≠ ho·∫∑c qu·∫£n tr·ªã.",
    "defi": "DeFi l√† t√†i ch√≠nh phi t·∫≠p trung, kh√¥ng qua trung gian, ch·∫°y tr√™n smart contract.",
    "airdrop": "Airdrop: d·ª± √°n t·∫∑ng token ƒë·ªÉ thu h√∫t ng∆∞·ªùi d√πng s·ªõm.",
    "node": "Node l√† m√°y/th√†nh ph·∫ßn ch·∫°y ph·∫ßn m·ªÅm m·∫°ng blockchain, gi√∫p x√°c th·ª±c/ghi d·ªØ li·ªáu.",
    "depin": "DePIN l√† m·∫°ng l∆∞·ªõi h·∫° t·∫ßng v·∫≠t l√Ω phi t·∫≠p trung; c·ªông ƒë·ªìng g√≥p thi·∫øt b·ªã & nh·∫≠n token.",
    "tin t·ª©c": "Theo d√µi Cointelegraph, The Block, Bankless ƒë·ªÉ c·∫≠p nh·∫≠t crypto m·ªói ng√†y.",
    "gi√°": "M√¨nh kh√¥ng d·ª± ƒëo√°n gi√°; h√£y qu·∫£n tr·ªã r·ªßi ro v√† ƒëa d·∫°ng ho√° danh m·ª•c nh√©!",
}

def match_auto(text: str):
    t = (text or "").lower().strip()
    for k, v in AUTO_REPLY.items():
        if k in t:
            return v
    return None

# ===== STYLE PROMPTS (Ti·∫øng Vi·ªát) =====
STYLE_PROMPTS = {
    "friendly": "B·∫°n l√† tr·ª£ l√Ω Ti·∫øng Vi·ªát th√¢n thi·ªán. Gi·ªçng casual, 1 emoji khi ph√π h·ª£p, tr·∫£ l·ªùi ng·∫Øn g·ªçn (1‚Äì3 c√¢u). Kh√¥ng v√≤ng vo.",
    "expert":   "B·∫°n l√† tr·ª£ l√Ω k·ªπ thu·∫≠t Ti·∫øng Vi·ªát. Tr·∫£ l·ªùi m·∫°ch l·∫°c, c√≥ ƒë·ªãnh nghƒ©a ng·∫Øn, c∆° ch·∫ø v√† 1 v√≠ d·ª•. Gi·ªçng trang tr·ªçng, s√∫c t√≠ch.",
}

# ======= AI tr·∫£ l·ªùi (n·∫øu c√≥ OPENAI_API_KEY) =======
def ai_reply(user_text: str, style: str = "friendly") -> str | None:
    if not OPENAI_API_KEY:
        return None
    try:
        # OpenAI SDK (>=2024) ‚Äî ki·ªÉu d√πng ƒë∆°n gi·∫£n
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)

        system_prompt = STYLE_PROMPTS.get(style, STYLE_PROMPTS["friendly"])
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.6 if style == "friendly" else 0.2,
            max_tokens=200 if style == "expert" else 120,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text},
            ],
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception as e:
        print("AI error:", e)
        return None

# ===== G·ª≠i Telegram =====
def tg_send(chat_id: str, text: str):
    if not (BOT_TOKEN and chat_id and text):
        return False
    try:
        r = requests.post(f"{TG_API}/sendMessage",
                          json={"chat_id": chat_id, "text": text},
                          timeout=10)
        return r.ok
    except Exception as e:
        print("TG send error:", e)
        return False

# ======= Routes =======
@app.route("/")
def home():
    return render_template("index.html")

@app.route("/api/send", methods=["POST"])
def api_send():
    data = request.get_json(force=True, silent=True) or {}
    user_text = f"{data.get('text','')}".strip()
    style = (data.get("style") or "friendly").lower()

    if not user_text:
        return jsonify({"ok": False, "error": "Thi·∫øu n·ªôi dung"}), 400

    # 1) G·ª≠i c√¢u h·ªèi sang Telegram (ƒë·ªÉ b·∫°n th·∫•y log tr√™n ƒëi·ªán tho·∫°i/desktop)
    tg_send(CHAT_ID, f"[WEB] {user_text}")

    # 2) Th·ª≠ d√πng AI tr∆∞·ªõc (n·∫øu c√≥ KEY), n·∫øu fail ‚Üí fallback auto
    reply = ai_reply(user_text, style=style) or match_auto(user_text)

    # 3) N·∫øu v·∫´n kh√¥ng c√≥, tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
    if not reply:
        reply = "M√¨nh ƒë√£ chuy·ªÉn c√¢u h·ªèi cho ch·ªß bot, s·∫Ω tr·∫£ l·ªùi s·ªõm!"

    # 4) G·ª≠i c√¢u tr·∫£ l·ªùi v·ªÅ Telegram (ƒë·ªÉ l∆∞u v·∫øt)
    tg_send(CHAT_ID, f"[BOT] {reply}")

    return jsonify({"ok": True, "reply": reply})

# Health check
@app.route("/healthz")
def health():
    return "ok", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
