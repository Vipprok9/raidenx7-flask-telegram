import os, time, requests
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS

app = Flask(__name__)
# Cho ph√©p g·ªçi t·ª´ web tƒ©nh (Cloudflare Pages) ho·∫∑c c√πng domain Render
# N·∫øu b·∫°n bi·∫øt domain Pages, thay "*" b·∫±ng ["https://<ten>.pages.dev"]
CORS(app, resources={r"/*": {"origins": "*"}})

# ENV c·∫ßn c√≥ tr√™n Render:
# TELEGRAM_TOKEN  : token bot t·ª´ BotFather
# TARGET_CHAT_ID  : chat id Telegram c·ªßa B·∫†N (n∆°i nh·∫≠n tin t·ª´ web & forward)
TOKEN = os.environ.get("TELEGRAM_TOKEN", "")
OWNER_CHAT_ID = os.environ.get("TARGET_CHAT_ID", "")

if not TOKEN:
    print("[WARN] Missing TELEGRAM_TOKEN")
if not OWNER_CHAT_ID:
    print("[WARN] Missing TARGET_CHAT_ID")

TG_API = f"https://api.telegram.org/bot{TOKEN}"

# ====== AUTO-REPLY TRENDS (c√≥ th·ªÉ m·ªü r·ªông) ======
AUTO_REPLY = {
    "hello": "Xin ch√†o üëã, m√¨nh l√† bot h·ªó tr·ª£ c∆° b·∫£n.",
    "ai": "AI (Tr√≠ tu·ªá nh√¢n t·∫°o) gi√∫p m√°y t√≠nh h·ªçc v√† suy nghƒ© nh∆∞ con ng∆∞·ªùi.",
    "token": "Token l√† ƒë∆°n v·ªã ti·ªÅn ƒëi·ªán t·ª≠ ph√°t h√†nh tr√™n blockchain.",
    "defi": "DeFi l√† t√†i ch√≠nh phi t·∫≠p trung: vay, g·ª≠i, swap‚Ä¶ ch·∫°y b·∫±ng smart contract.",
    "airdrop": "Airdrop: d·ª± √°n t·∫∑ng token cho c·ªông ƒë·ªìng (th∆∞·ªùng c·∫ßn l√†m nhi·ªám v·ª•/testnet).",
    "node": "Node l√† m√°y/thi·∫øt b·ªã duy tr√¨ m·∫°ng blockchain, ch·∫°y node c√≥ th·ªÉ ƒë∆∞·ª£c th∆∞·ªüng token.",
    "depin": "DePIN = Decentralized Physical Infrastructure Network (h·∫° t·∫ßng v·∫≠t l√Ω phi t·∫≠p trung).",
    "tin t·ª©c": "Theo d√µi Cointelegraph, Binance News, ho·∫∑c Twitter/X ƒë·ªÉ c·∫≠p nh·∫≠t nhanh.",
    "gi√°": "M√¨nh kh√¥ng th·ªÉ d·ª± ƒëo√°n gi√°. H√£y qu·∫£n l√Ω r·ªßi ro v√† theo d√µi th·ªã tr∆∞·ªùng nh√©."
}

def match_auto(text: str):
    if not text:
        return None
    t = text.lower()
    for k, v in AUTO_REPLY.items():
        if k in t:
            return v
    return None

def tg_send(chat_id, text):
    try:
        r = requests.post(f"{TG_API}/sendMessage", json={"chat_id": chat_id, "text": text}, timeout=15)
        return r.ok, (r.json() if r.headers.get("content-type","").startswith("application/json") else r.text)
    except Exception as e:
        return False, str(e)

@app.route("/")
def home():
    return render_template("index.html")

# ---------- WEB ‚Üí TELEGRAM + AUTO-REPLY (tr·∫£ l·ªùi l·∫°i cho web) ----------
@app.post("/send")
def send_from_web():
    if not TOKEN or not OWNER_CHAT_ID:
        return jsonify(ok=False, error="Server ch∆∞a c·∫•u h√¨nh TOKEN/CHAT_ID"), 500

    data = request.get_json(silent=True) or {}
    text = (data.get("text") or "").strip()
    if not text:
        return jsonify(ok=False, error="empty text"), 400

    # 1) Forward c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng t·ª´ web sang Telegram c·ªßa b·∫°n
    ok1, res1 = tg_send(OWNER_CHAT_ID, f"[WEB] Kh√°ch h·ªèi: {text}")

    # 2) Th·ª≠ auto-reply theo b·ªô rule
    ar = match_auto(text)
    if ar:
        # G·ª≠i c√¢u tr·∫£ l·ªùi auto sang Telegram (ƒë·ªÉ b·∫°n nh√¨n th·∫•y lu√¥n)
        tg_send(OWNER_CHAT_ID, f"[AUTO] {ar}")
        # Tr·∫£ cho web ƒë·ªÉ hi·ªán ngay
        return jsonify(ok=True, reply=ar)

    # 3) N·∫øu kh√¥ng match auto, v·∫´n tr·∫£ l·ªùi l·ªãch s·ª± tr√™n web + b·∫°n nh·∫≠n b·∫£n g·ªëc tr√™n Telegram
    fallback = "M√¨nh ƒë√£ chuy·ªÉn c√¢u h·ªèi c·ªßa b·∫°n cho admin üì© ‚Äî s·∫Ω tr·∫£ l·ªùi s·ªõm nh√©!"
    return jsonify(ok=True, reply=fallback)

# ---------- TELEGRAM ‚Üí AUTO-REPLY + FORWARD CHO B·∫†N KHI KH√îNG MATCH ----------
@app.post(f"/{TOKEN}")
def telegram_webhook():
    upd = request.get_json(silent=True) or {}
    msg = upd.get("message") or {}
    text = msg.get("text") or ""
    chat = msg.get("chat") or {}
    from_user = msg.get("from") or {}
    chat_id = chat.get("id")

    if not chat_id:
        return jsonify(ok=True)

    ar = match_auto(text)

    if ar:
        # Tr·∫£ l·ªùi ngay trong cu·ªôc chat Telegram ƒë√≥
        tg_send(chat_id, ar)
    else:
        # Kh√¥ng match ‚Üí n·∫øu l√† tin c·ªßa ng∆∞·ªùi kh√°c (kh√¥ng ph·∫£i owner),
        # forward cho b·∫°n bi·∫øt ƒë·ªÉ t·ª± tr·∫£ l·ªùi.
        if OWNER_CHAT_ID and str(chat_id) != str(OWNER_CHAT_ID):
            uname = from_user.get("username") or (from_user.get("first_name","") + " " + from_user.get("last_name","")).strip()
            uname = uname or "user"
            tg_send(OWNER_CHAT_ID, f"[FWD] @{uname}: {text}")

    return jsonify(ok=True)

@app.get("/health")
def health():
    return "ok", 200

if __name__ == "__main__":
    # Local run: python server.py
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
