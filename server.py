# server.py
import os, requests
from time import time
from collections import deque
from flask import Flask, request, jsonify, send_from_directory, current_app
from flask_cors import CORS

# ==== Flask & CORS ====
# static_folder="." ƒë·ªÉ ph·ª•c v·ª• index.html ·ªü th∆∞ m·ª•c g·ªëc repo
app = Flask(__name__, static_url_path="", static_folder=".")
CORS(app, resources={r"/api/*": {"origins": "*"}})

# ==== ENV ====
# Tr√™n Render: ƒë·∫∑t BOT_TOKEN (b·∫Øt bu·ªôc), CHAT_ID (t√πy ch·ªçn cho chi·ªÅu Web‚ÜíTG)
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
CHAT_ID   = os.environ.get("CHAT_ID", "").strip()   # optional
TG_API    = "https://api.telegram.org/bot" + BOT_TOKEN

# ==== B·ªô nh·ªõ t·∫°m ƒë·ªÉ demo (prod n√™n d√πng Redis/DB) ====
MESSAGES = deque(maxlen=200)  # l∆∞u 200 tin g·∫ßn nh·∫•t

def push_msg(source, text):
    MESSAGES.append({"ts": time(), "source": source, "text": text or ""})

# ==== Auto-reply ng·∫Øn ====
AUTO_REPLY = {
    "hello": "Xin ch√†o üëã, m√¨nh l√† bot raidenx7!",
    "ai": "AI l√† tr√≠ tu·ªá nh√¢n t·∫°o gi√∫p t·ª± ƒë·ªông h√≥a v√† ph√¢n t√≠ch.",
    "token": "Token l√† ƒë∆°n v·ªã gi√° tr·ªã tr√™n blockchain.",
    "defi": "DeFi l√† t√†i ch√≠nh phi t·∫≠p trung (decentralized finance).",
    "airdrop": "Airdrop: d·ª± √°n t·∫∑ng token cho ng∆∞·ªùi d√πng.",
    "node": "Node l√† m√°y/ch∆∞∆°ng tr√¨nh tham gia m·∫°ng blockchain.",
    "depin": "DePIN l√† m·∫°ng l∆∞·ªõi h·∫° t·∫ßng v·∫≠t l√Ω phi t·∫≠p trung."
}
def match_auto(text: str) -> str:
    t = (text or "").lower().strip()
    for k, v in AUTO_REPLY.items():
        if k in t:
            return v
    return "M√¨nh ƒë√£ chuy·ªÉn c√¢u h·ªèi cho h·ªá th·ªëng, c·∫£m ∆°n b·∫°n!"

# ==== Trang test (/) an to√†n, kh√¥ng 500 khi thi·∫øu file ====
@app.get("/")
def home():
    static_dir = current_app.static_folder or "."
    index_path = os.path.join(static_dir, "index.html")
    if not os.path.isfile(index_path):
        # fallback ƒë·ªÉ tr√°nh 500 v√† d·ªÖ debug
        return "<h3>App ƒëang ch·∫°y ‚úÖ ‚Äî thi·∫øu index.html</h3>", 200
    return send_from_directory(static_dir, "index.html")

# ==== Web ‚Üí Telegram ====
# POST /api/send  body: {"text":"..."}  (t√πy ch·ªçn {"chat_id": ...})
@app.post("/api/send")
def api_send():
    try:
        data = request.get_json(silent=True) or {}
        text = (data.get("text") or "").strip()
        chat_id = str(data.get("chat_id") or CHAT_ID).strip()

        if not text:
            return jsonify({"ok": False, "error": "missing text"}), 400
        if not BOT_TOKEN:
            return jsonify({"ok": False, "error": "missing BOT_TOKEN env"}), 500
        if not chat_id:
            return jsonify({"ok": False, "error": "missing chat_id (pass in body or set CHAT_ID env)"}), 400

        # L∆∞u tin g·ª≠i t·ª´ web ƒë·ªÉ front-end hi·ªÉn th·ªã ngay
        push_msg("web", text)

        r = requests.post(
            f"{TG_API}/sendMessage",
            json={"chat_id": chat_id, "text": text},
            timeout=10
        )
        ok = r.ok and r.json().get("ok", False)
        return jsonify({"ok": bool(ok), "tg": r.json() if r.ok else r.text})
    except Exception as e:
        print("ERROR /api/send:", repr(e), flush=True)
        return jsonify({"ok": False, "error": str(e)}), 500

# ==== Telegram ‚Üí Web (Webhook) ====
@app.post("/webhook")
def telegram_webhook():
    try:
        data = request.get_json(silent=True) or {}
        msg = data.get("message") or data.get("edited_message") or data.get("channel_post") or {}
        chat_id = (msg.get("chat") or {}).get("id")
        text = msg.get("text") or ""

        print("INCOMING:", {"chat_id": chat_id, "text": text}, flush=True)

        # L∆∞u tin Telegram ƒë·ªÉ web k√©o v·ªÅ
        if text:
            push_msg("telegram", text)

        # Auto-reply ƒë∆°n gi·∫£n
        reply = match_auto(text)
        if BOT_TOKEN and chat_id and reply:
            requests.post(
                f"{TG_API}/sendMessage",
                json={"chat_id": chat_id, "text": reply},
                timeout=10
            )
        return jsonify({"ok": True})
    except Exception as e:
        print("ERROR /webhook:", repr(e), flush=True)
        # v·∫´n tr·∫£ 200 ƒë·ªÉ Telegram kh√¥ng retry d·ªìn d·∫≠p
        return jsonify({"ok": False, "error": str(e)}), 200

# ==== API cho front-end k√©o tin v·ªÅ ====
@app.get("/api/messages")
def api_messages():
    try:
        since = request.args.get("since", type=float)  # epoch seconds
        items = list(MESSAGES)
        if since:
            items = [m for m in items if m["ts"] > since]
        return jsonify({"ok": True, "items": items, "now": time()})
    except Exception as e:
        print("ERROR /api/messages:", repr(e), flush=True)
        return jsonify({"ok": False, "error": str(e)}), 500

# ==== Healthcheck ====
@app.get("/health")
def health():
    return {"ok": True}

# ==== Error handler chung (log r√µ l·ªói 500) ====
@app.errorhandler(Exception)
def on_error(e):
    print("ERROR general:", repr(e), flush=True)
    return jsonify({"ok": False, "error": str(e)}), 500

# ==== cho gunicorn ====
app = app
